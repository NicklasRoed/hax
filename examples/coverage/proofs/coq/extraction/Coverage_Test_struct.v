(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

Record t_foo `{v_T : Type} `{v_N : t_usize} `{t_Sized (v_T)} : Type :=
  {
    f_bar : v_T;
    f_baz : t_Array (v_T) (v_N);
    f_qux : t_u8;
  }.
Arguments t_foo:clear implicits.
Arguments t_foo (_) (_) {_}.
Arguments Build_t_foo {_} {_} {_}.
#[export] Instance settable_t_foo `{v_T : Type} `{v_N : t_usize} `{t_Sized (v_T)} : Settable _ :=
  settable! (@Build_t_foo `{v_T : Type} `{v_N : t_usize} `{t_Sized (v_T)}) <f_bar; f_baz; f_qux>.

Record test__t_Gamma : Type :=
  {
  }.
Arguments test__t_Gamma:clear implicits.
Arguments test__t_Gamma.
Arguments Build_test__t_Gamma.
#[export] Instance settable_test__t_Gamma : Settable _ :=
  settable! (@Build_test__t_Gamma) <>.

Record test__t_Position : Type :=
  {
    test__0 : t_i32;
    test__1 : t_i32;
    test__2 : t_i32;
  }.
Arguments test__t_Position:clear implicits.
Arguments test__t_Position.
Arguments Build_test__t_Position.
#[export] Instance settable_test__t_Position : Settable _ :=
  settable! (@Build_test__t_Position) <test__0; test__1; test__2>.

Record test__t_Color : Type :=
  {
    test__0 : t_u8;
    test__1 : t_u8;
    test__2 : t_u8;
  }.
Arguments test__t_Color:clear implicits.
Arguments test__t_Color.
Arguments Build_test__t_Color.
#[export] Instance settable_test__t_Color : Settable _ :=
  settable! (@Build_test__t_Color) <test__0; test__1; test__2>.

Record test__t_PointA : Type :=
  {
    test__f_x : t_i32;
    test__f_y : t_i32;
  }.
Arguments test__t_PointA:clear implicits.
Arguments test__t_PointA.
Arguments Build_test__t_PointA.
#[export] Instance settable_test__t_PointA : Settable _ :=
  settable! (@Build_test__t_PointA) <test__f_x; test__f_y>.

Record test__t_PointB : Type :=
  {
    test__0 : t_i32;
    test__1 : t_i32;
  }.
Arguments test__t_PointB:clear implicits.
Arguments test__t_PointB.
Arguments Build_test__t_PointB.
#[export] Instance settable_test__t_PointB : Settable _ :=
  settable! (@Build_test__t_PointB) <test__0; test__1>.

Record test__t_CookieA : Type :=
  {
  }.
Arguments test__t_CookieA:clear implicits.
Arguments test__t_CookieA.
Arguments Build_test__t_CookieA.
#[export] Instance settable_test__t_CookieA : Settable _ :=
  settable! (@Build_test__t_CookieA) <>.

Record test__t_Cookie : Type :=
  {
  }.
Arguments test__t_Cookie:clear implicits.
Arguments test__t_Cookie.
Arguments Build_test__t_Cookie.
#[export] Instance settable_test__t_Cookie : Settable _ :=
  settable! (@Build_test__t_Cookie) <>.

Definition test__v_Cookie : test__t_Cookie :=
  Build_t_C_test__Cookie.

Definition test (_ : unit) : unit :=
  let a := Build_t_C_test__Gamma in
  let b := Build_t_C_test__Gamma in
  let _ := tt in
  let _ := Build_t_C_test__Position (0, 0, 0) in
  let c := C_test__Position in
  let pos := C_test__Position (8) (6) (7) in
  let _ := tt in
  let c1 := Build_t_C_test__Color (0, 0, 0) in
  let c2 := Build_t_C_test__Color (255, 127, 0) in
  let c3 := Build_t_C_test__Color (0) in
  let _ := tt in
  let p := Build_t_C_test__PointA (10, 11) in
  let px : t_i32 := test__f_x p in
  let p2 := Build_t_C_test__PointA (10, 11) in
  let p2 := Build_p2 (10) in
  let p2 := Build_p2 (14) in
  let _ := tt in
  let p := Build_t_C_test__PointB (10, 11) in
  let px : t_i32 := match p with
  | Build_t_C_test__PointB (x) (_) =>
    x
  end in
  let _ := tt in
  let c := [Build_t_C_test__CookieA; Build_t_C_test__CookieA; Build_t_C_test__CookieA; Build_t_C_test__CookieA] in
  let _ := tt in
  let c := [test__v_Cookie; Build_t_C_test__Cookie; test__v_Cookie; Build_t_C_test__Cookie] in
  tt.
