(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

Definition analyze_slice (slice : t_Slice t_i32) : unit :=
  let _ := f_index (slice) (0) in
  let _ := impl__len (slice) in
  tt.

Definition test (_ : unit) : unit :=
  let xs : t_Array (t_i32) (5) := [1; 2; 3; 4; 5] in
  let ys : t_Array (t_i32) (500) := repeat (0) (500) in
  let _ := f_index (xs) (0) in
  let _ := f_index (xs) (1) in
  let _ := impl__len (unsize (xs)) in
  let _ := analyze_slice (unsize (xs)) in
  let _ := analyze_slice (f_index (ys) (Build_t_Range (1, 4))) in
  let empty_array : t_Array (t_u32) (0) := [] in
  let _ := match (empty_array,[]) with
  | (left_val,right_val) =>
    assert (f_eq (left_val) (right_val))
  end in
  let _ := match (empty_array,f_index ([]) (Build_t_RangeFull)) with
  | (left_val,right_val) =>
    assert (f_eq (left_val) (right_val))
  end in
  tt.
