(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

Class t_Measurable `{v_Self : Type} : Type :=
  {
    f_measure : v_Self -> t_i32 -> t_i32 -> t_i32;
    f_hallo : v_Self -> t_i64 -> t_i64;
  }.
Arguments t_Measurable:clear implicits.
Arguments t_Measurable (_).

Record t_Rectangle : Type :=
  {
    f_width : t_i32;
    f_height : t_i32;
  }.
Arguments t_Rectangle:clear implicits.
Arguments t_Rectangle.
Arguments Build_t_Rectangle.
#[export] Instance settable_t_Rectangle : Settable _ :=
  settable! (@Build_t_Rectangle) <f_width; f_height>.

Definition impl_Rectangle__area (self : t_Rectangle) : t_i32 :=
  f_mul (f_width self) (f_height self).

Definition add_dimensions (rect : t_Rectangle) : t_i32 :=
  let x := f_add (f_width rect) (f_height rect) in
  impl_Rectangle__area (rect).

Instance t_Measurable_830182458 : t_Measurable ((t_i32)) :=
  {
    t_Measurable_f_measure := fun (self : t_i32) (x : t_i32) (y : t_i32) =>
      f_mul (x) (y);
    t_Measurable_f_hallo := fun (self : t_i32) (z : t_i64) =>
      f_add (z) (2);
  }.

Definition print_measurement `{v_T : Type} `{t_Sized (v_T)} `{t_Measurable (v_T)} (item : v_T) : t_i32 :=
  f_measure (item) (5) (5).

Definition stupid_func (x : t_i32) : t_i32 :=
  let x1 := f_add (x) (1) in
  let x2 := f_add (x1) (1) in
  f_add (x2) (1).

Definition main (_ : unit) : unit :=
  tt.
