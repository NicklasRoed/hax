(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

Record t_Coords `{v_T : Type} `{t_Sized (v_T)} : Type :=
  {
    0 : v_T;
    1 : v_T;
  }.
Arguments t_Coords:clear implicits.
Arguments t_Coords (_) {_}.
Arguments Build_t_Coords {_} {_}.
#[export] Instance settable_t_Coords `{v_T : Type} `{t_Sized (v_T)} : Settable _ :=
  settable! (@Build_t_Coords `{v_T : Type} `{t_Sized (v_T)}) <0; 1>.

Definition main (_ : unit) : unit :=
  let point := Build_t_Coords (3.14%float, 2.71%float) in
  let x := 0 point in
  let y := 1 point in
  tt.

Record t_Pair `{v_T : Type} `{t_Sized (v_T)} : Type :=
  {
    f_first : v_T;
    f_second : v_T;
  }.
Arguments t_Pair:clear implicits.
Arguments t_Pair (_) {_}.
Arguments Build_t_Pair {_} {_}.
#[export] Instance settable_t_Pair `{v_T : Type} `{t_Sized (v_T)} : Settable _ :=
  settable! (@Build_t_Pair `{v_T : Type} `{t_Sized (v_T)}) <f_first; f_second>.
