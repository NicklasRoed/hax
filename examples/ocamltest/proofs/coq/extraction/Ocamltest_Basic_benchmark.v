(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

Definition v_MAX_POINTS : t_u32 :=
  100000.

(* NotImplementedYet *)

Definition main__nested_function (x : t_i32) : t_i32 :=
  f_mul (x) (x).

Definition t_Add_f_add (a : t_i32) (b : t_i32) : t_i32 :=
  f_add (a) (b).

Definition multiply (a : t_i32) (b : t_i32) : t_i32 :=
  f_mul (a) (b).

Definition early_return_example (flag : bool) : t_i32 :=
  run (let _ := if
    flag
  then
    let hoist1 := ControlFlow_Break (1) in
    ControlFlow_Continue (never_to_any (hoist1))
  else
    ControlFlow_Continue (tt) in
  ControlFlow_Continue (let x := 10 in
  let y := 20 in
  f_add (x) (y))).

Definition main (_ : unit) : unit :=
  let immutable_var := 5 in
  let mutable_var := 10 in
  let mutable_var := 12 in
  let x := 5 in
  let x := f_add (x) (1) in
  let explicit_type : t_i64 := 42 in
  let signed_int : t_i32 := -42 in
  let unsigned_int : t_u32 := 42 in
  let float_num : float := 3.14159%float in
  let is_active : bool := true in
  let is_greater := f_gt (10) (5) in
  let letter : ascii := "A"%char in
  let string_literal : string := "hello"%string in
  let string_object : t_String := f_from ("Hello, "%string) in
  let string_object := impl_String__push_str (string_object) ("world!"%string) in
  let unit_value : unit := tt in
  let tuple : (t_i32*float*string) := (500,6.4%float,"tuple"%string) in
  let (x,y,z) := tuple in
  let first := TODO: please implement the method `expr'_App_tuple_projection` in
  let condition := true in
  let number := if
    condition
  then
    5
  else
    6 in
  let dice_roll := 6 in
  let _ := match dice_roll with
  | 1 =>
    let _ := e_print (impl_2__new_const (["One!
"%string])) in
    tt
  | 2 =>
    let _ := e_print (impl_2__new_const (["Between two and five
"%string])) in
    tt
  | 6 =>
    let _ := e_print (impl_2__new_const (["Six!
"%string])) in
    tt
  | _ =>
    let _ := e_print (impl_2__new_const (["Invalid dice roll
"%string])) in
    tt
  end in
  let sum := t_Add_f_add (5) (10) in
  let product := multiply (3) (4) in
  let add_one := fun x =>
    f_add (x) (1) in
  let three := f_call (add_one) ((2)) in
  let multiply_by := fun x y =>
    f_mul (x) (y) in
  let eight := f_call (multiply_by) ((2,4)) in
  let nested_result := main__nested_function (4) in
  let early_return_val := early_return_example (true) in
  tt.

Fixpoint factorial (n : t_u32) : t_u32 :=
  if
    f_le (n) (1)
  then
    1
  else
    f_mul (n) (factorial (f_sub (n) (1))).
